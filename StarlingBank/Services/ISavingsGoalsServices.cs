using System;
using System.Threading.Tasks;

namespace StarlingBank.Services
{
    public interface ISavingsGoalsServices
    {
        /// <summary>
        /// Add money into a savings goal
        /// </summary>
        /// <param name="starlingClient">The starling client.</param>
        /// <param name="accountUid">Required parameter: Account uid</param>
        /// <param name="savingsGoalUid">Required parameter: Savings goal uid</param>
        /// <param name="transferUid">Required parameter: Transfer uid, generated by the caller</param>
        /// <param name="topUpRequest">Required parameter: Top up request</param>
        /// <returns>Task&lt;Models.SavingsGoalTransferResponseV2&gt;.</returns>
        /// <return>Returns the Models.SavingsGoalTransferResponseV2 response from the API call</return>
        Task<Models.SavingsGoalTransferResponseV2> AddMoneyAsync(StarlingClient starlingClient,
            Guid accountUid,
            Guid savingsGoalUid,
            Guid transferUid,
            Models.TopUpRequestV2 topUpRequest);

        /// <summary>
        /// Get the recurring transfer of a savings goal
        /// </summary>
        /// <param name="starlingClient">The starling client.</param>
        /// <param name="accountUid">Required parameter: Account uid</param>
        /// <param name="savingsGoalUid">Required parameter: Savings goal uid</param>
        /// <returns>Task&lt;Models.ScheduledSavingsPaymentV2&gt;.</returns>
        /// <return>Returns the Models.ScheduledSavingsPaymentV2 response from the API call</return>
        Task<Models.ScheduledSavingsPaymentV2> GetRecurringTransferAsync(StarlingClient starlingClient, Guid accountUid, Guid savingsGoalUid);

        /// <summary>
        /// Create a recurring transfer into a savings goal
        /// </summary>
        /// <param name="starlingClient">The starling client.</param>
        /// <param name="accountUid">Required parameter: Account uid</param>
        /// <param name="savingsGoalUid">Required parameter: Savings goal uid</param>
        /// <param name="scheduledSavingsPaymentRequest">Required parameter: Recurring transfer request</param>
        /// <returns>Task&lt;Models.SavingsGoalTransferResponseV2&gt;.</returns>
        /// <return>Returns the Models.SavingsGoalTransferResponseV2 response from the API call</return>
        Task<Models.SavingsGoalTransferResponseV2> CreateOrUpdateRecurringTransferAsync(StarlingClient starlingClient, Guid accountUid, Guid savingsGoalUid,
            Models.ScheduledSavingsPaymentRequestV2 scheduledSavingsPaymentRequest);

        /// <summary>
        /// Delete the recurring transfer of a savings goal
        /// </summary>
        /// <param name="starlingClient">The starling client.</param>
        /// <param name="accountUid">Required parameter: Account uid</param>
        /// <param name="savingsGoalUid">Required parameter: Savings goal uid</param>
        /// <returns>Task.</returns>
        /// <return>Returns the void response from the API call</return>
        Task DeleteRecurringTransferAsync(StarlingClient starlingClient, Guid accountUid, Guid savingsGoalUid);

        /// <summary>
        /// Get all savings goals
        /// </summary>
        /// <param name="starlingClient">The starling client.</param>
        /// <param name="accountUid">Required parameter: Account uid</param>
        /// <returns>Task&lt;Models.SavingsGoalsV2&gt;.</returns>
        /// <return>Returns the Models.SavingsGoalsV2 response from the API call</return>
        Task<Models.SavingsGoalsV2> GetSavingsGoalsAsync(StarlingClient starlingClient, Guid accountUid);

        /// <summary>
        /// Create a savings goal
        /// </summary>
        /// <param name="starlingClient">The starling client.</param>
        /// <param name="accountUid">Required parameter: Account uid</param>
        /// <param name="savingsGoalRequest">Required parameter: Savings goal request</param>
        /// <returns>Task&lt;Models.CreateOrUpdateSavingsGoalResponseV2&gt;.</returns>
        /// <return>Returns the Models.CreateOrUpdateSavingsGoalResponseV2 response from the API call</return>
        Task<Models.CreateOrUpdateSavingsGoalResponseV2> CreateSavingsGoalAsync(StarlingClient starlingClient, Guid accountUid,
            Models.SavingsGoalRequestV2 savingsGoalRequest);

        /// <summary>
        /// Get a savings goal
        /// </summary>
        /// <param name="starlingClient">The starling client.</param>
        /// <param name="accountUid">Required parameter: Account uid</param>
        /// <param name="savingsGoalUid">Required parameter: Savings goal uid</param>
        /// <returns>Task&lt;Models.SavingsGoalV2&gt;.</returns>
        /// <return>Returns the Models.SavingsGoalV2 response from the API call</return>
        Task<Models.SavingsGoalV2> GetSavingsGoalAsync(StarlingClient starlingClient, Guid accountUid, Guid savingsGoalUid);

        /// <summary>
        /// Update an existing goal
        /// </summary>
        /// <param name="starlingClient">The starling client.</param>
        /// <param name="accountUid">Required parameter: Account uid</param>
        /// <param name="savingsGoalUid">Required parameter: Savings goal uid</param>
        /// <param name="savingsGoalRequest">Required parameter: Savings goal request</param>
        /// <returns>Task&lt;Models.CreateOrUpdateSavingsGoalResponseV2&gt;.</returns>
        /// <return>Returns the Models.CreateOrUpdateSavingsGoalResponseV2 response from the API call</return>
        Task<Models.CreateOrUpdateSavingsGoalResponseV2> UpdateSavingsGoalAsync(StarlingClient starlingClient, Guid accountUid, Guid savingsGoalUid,
            Models.SavingsGoalRequestV2 savingsGoalRequest);

        /// <summary>
        /// Delete a savings goal
        /// </summary>
        /// <param name="starlingClient">The starling client.</param>
        /// <param name="accountUid">Required parameter: Account uid</param>
        /// <param name="savingsGoalUid">Required parameter: Savings goal uid</param>
        /// <returns>Task.</returns>
        /// <return>Returns the void response from the API call</return>
        Task DeleteSavingsGoalAsync(StarlingClient starlingClient, Guid accountUid, Guid savingsGoalUid);

        /// <summary>
        /// Get the photo associated with a savings goal
        /// </summary>
        /// <param name="starlingClient">The starling client.</param>
        /// <param name="accountUid">Required parameter: Account uid</param>
        /// <param name="savingsGoalUid">Required parameter: Savings goal uid</param>
        /// <returns>Task&lt;Models.SavingsGoalPhotoV2&gt;.</returns>
        /// <return>Returns the Models.SavingsGoalPhotoV2 response from the API call</return>
        Task<Models.SavingsGoalPhotoV2> GetSavingsGoalPhotoAsync(StarlingClient starlingClient, Guid accountUid, Guid savingsGoalUid);

        /// <summary>
        /// Withdraw money from a savings goal
        /// </summary>
        /// <param name="starlingClient">The starling client.</param>
        /// <param name="accountUid">Required parameter: Account uid</param>
        /// <param name="savingsGoalUid">Required parameter: Savings goal uid</param>
        /// <param name="transferUid">Required parameter: Transfer uid, generated by the caller</param>
        /// <param name="withdrawalRequest">Required parameter: Withdrawal request</param>
        /// <returns>Task&lt;Models.SavingsGoalTransferResponseV2&gt;.</returns>
        /// <return>Returns the Models.SavingsGoalTransferResponseV2 response from the API call</return>
        Task<Models.SavingsGoalTransferResponseV2> WithdrawMoneyAsync(StarlingClient starlingClient,
            Guid accountUid,
            Guid savingsGoalUid,
            Guid transferUid,
            Models.WithdrawalRequestV2 withdrawalRequest);
    }
}
